Ok:

* Changed as many types to their most-boxed type possible as early as possible: researchIds and researchEffectIds are always ResourceLocation-typed instead of merely resourcelocation-formatted strings, from the second GSON finishes parsing them.  BranchIds are also now ResourceLocation-typed anywhere they show up, whether as return types, internal hashmaps, or arguments.  Research and Effect Subtitles, Descriptions, and Names are turned into TranslationTexts as soon as they're parsed, whether from json or serial/deserial -- do note that using these early means that it can be more important to make deep copies before applying styles or formatting.  ItemCosts for research and Reset Costs for resetting research are all turned into ItemStorage asap.
* IICon was dropped (1.8?), and most alternatives presented issues with the client/server split.  So `getIcon` is now split into `getIconTextureResourceLocation()` and `getIconItemStack()`, which return just the ResourceLocation or ItemStack.  For now, the json parser will automatically parse out the logic such that only one will be populated; for empties, I've used `ResourceLocation("")` and `ItemStack.EMPTY` respectively, as mishandling a null instead can cause crashes rather than logged exceptions (especially for Textures).
* The only research-related thing that's still a String from external perspectives is the `BuildingResearchRequirement` and `AlternateBuildingResearchRequirement` 's respective Building types.  They have an indirect relationship to ResourceLocations, but not to a single unique one, and I can't think of any more compatible type.
* Removed `researchEffect.getBoolean`.  I've left the `getEffect(w)`, even though nothing uses it for now, because it may be more heavily used as the basis for the data-driven effects.  `getEffectValue` is the only applied approach.
* Replaced the various getAttributes string-based manipulation with a Compound-NBT-based system for serialization and deserialization of `IResearchRequirement` and `IResearchEffect`.  It's not pretty, but I think I'm using it in as close to a Minecraft-approved manner as possible.  Implemented reflection to handle the various types (for what little that matters on ResearchEffect), so it should be possible to add new classes implementing `IResearchRequirement` and `IResearchEffect` without having to make any changes to GlobalResearchFactory.  I do assume that j
* 